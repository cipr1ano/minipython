# Generated from PythonLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,296,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
        20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,
        25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,4,
        30,206,8,30,11,30,12,30,207,1,30,1,30,5,30,212,8,30,10,30,12,30,
        215,9,30,3,30,217,8,30,1,30,1,30,4,30,221,8,30,11,30,12,30,222,3,
        30,225,8,30,1,31,1,31,5,31,229,8,31,10,31,12,31,232,9,31,1,31,1,
        31,1,31,5,31,237,8,31,10,31,12,31,240,9,31,1,31,3,31,243,8,31,1,
        32,1,32,5,32,247,8,32,10,32,12,32,250,9,32,1,33,1,33,1,34,1,34,1,
        35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,3,
        41,269,8,41,1,41,1,41,1,42,4,42,274,8,42,11,42,12,42,275,1,42,1,
        42,1,43,1,43,5,43,282,8,43,10,43,12,43,285,9,43,1,43,1,43,1,44,1,
        44,3,44,291,8,44,1,44,1,44,1,44,1,44,0,0,45,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,44,89,45,1,0,7,1,0,48,57,4,0,10,10,
        13,13,34,34,92,92,4,0,10,10,13,13,39,39,92,92,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,308,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,
        1,0,0,0,3,95,1,0,0,0,5,101,1,0,0,0,7,104,1,0,0,0,9,109,1,0,0,0,11,
        114,1,0,0,0,13,118,1,0,0,0,15,124,1,0,0,0,17,127,1,0,0,0,19,134,
        1,0,0,0,21,140,1,0,0,0,23,144,1,0,0,0,25,147,1,0,0,0,27,151,1,0,
        0,0,29,156,1,0,0,0,31,162,1,0,0,0,33,167,1,0,0,0,35,173,1,0,0,0,
        37,175,1,0,0,0,39,177,1,0,0,0,41,179,1,0,0,0,43,182,1,0,0,0,45,184,
        1,0,0,0,47,186,1,0,0,0,49,189,1,0,0,0,51,191,1,0,0,0,53,193,1,0,
        0,0,55,195,1,0,0,0,57,198,1,0,0,0,59,201,1,0,0,0,61,224,1,0,0,0,
        63,242,1,0,0,0,65,244,1,0,0,0,67,251,1,0,0,0,69,253,1,0,0,0,71,255,
        1,0,0,0,73,257,1,0,0,0,75,259,1,0,0,0,77,261,1,0,0,0,79,263,1,0,
        0,0,81,265,1,0,0,0,83,268,1,0,0,0,85,273,1,0,0,0,87,279,1,0,0,0,
        89,290,1,0,0,0,91,92,5,100,0,0,92,93,5,101,0,0,93,94,5,102,0,0,94,
        2,1,0,0,0,95,96,5,99,0,0,96,97,5,108,0,0,97,98,5,97,0,0,98,99,5,
        115,0,0,99,100,5,115,0,0,100,4,1,0,0,0,101,102,5,105,0,0,102,103,
        5,102,0,0,103,6,1,0,0,0,104,105,5,101,0,0,105,106,5,108,0,0,106,
        107,5,115,0,0,107,108,5,101,0,0,108,8,1,0,0,0,109,110,5,101,0,0,
        110,111,5,108,0,0,111,112,5,105,0,0,112,113,5,102,0,0,113,10,1,0,
        0,0,114,115,5,102,0,0,115,116,5,111,0,0,116,117,5,114,0,0,117,12,
        1,0,0,0,118,119,5,119,0,0,119,120,5,104,0,0,120,121,5,105,0,0,121,
        122,5,108,0,0,122,123,5,101,0,0,123,14,1,0,0,0,124,125,5,105,0,0,
        125,126,5,110,0,0,126,16,1,0,0,0,127,128,5,114,0,0,128,129,5,101,
        0,0,129,130,5,116,0,0,130,131,5,117,0,0,131,132,5,114,0,0,132,133,
        5,110,0,0,133,18,1,0,0,0,134,135,5,112,0,0,135,136,5,114,0,0,136,
        137,5,105,0,0,137,138,5,110,0,0,138,139,5,116,0,0,139,20,1,0,0,0,
        140,141,5,97,0,0,141,142,5,110,0,0,142,143,5,100,0,0,143,22,1,0,
        0,0,144,145,5,111,0,0,145,146,5,114,0,0,146,24,1,0,0,0,147,148,5,
        110,0,0,148,149,5,111,0,0,149,150,5,116,0,0,150,26,1,0,0,0,151,152,
        5,84,0,0,152,153,5,114,0,0,153,154,5,117,0,0,154,155,5,101,0,0,155,
        28,1,0,0,0,156,157,5,70,0,0,157,158,5,97,0,0,158,159,5,108,0,0,159,
        160,5,115,0,0,160,161,5,101,0,0,161,30,1,0,0,0,162,163,5,78,0,0,
        163,164,5,111,0,0,164,165,5,110,0,0,165,166,5,101,0,0,166,32,1,0,
        0,0,167,168,5,114,0,0,168,169,5,97,0,0,169,170,5,110,0,0,170,171,
        5,103,0,0,171,172,5,101,0,0,172,34,1,0,0,0,173,174,5,43,0,0,174,
        36,1,0,0,0,175,176,5,45,0,0,176,38,1,0,0,0,177,178,5,42,0,0,178,
        40,1,0,0,0,179,180,5,42,0,0,180,181,5,42,0,0,181,42,1,0,0,0,182,
        183,5,47,0,0,183,44,1,0,0,0,184,185,5,37,0,0,185,46,1,0,0,0,186,
        187,5,61,0,0,187,188,5,61,0,0,188,48,1,0,0,0,189,190,5,61,0,0,190,
        50,1,0,0,0,191,192,5,60,0,0,192,52,1,0,0,0,193,194,5,62,0,0,194,
        54,1,0,0,0,195,196,5,60,0,0,196,197,5,61,0,0,197,56,1,0,0,0,198,
        199,5,62,0,0,199,200,5,61,0,0,200,58,1,0,0,0,201,202,5,33,0,0,202,
        203,5,61,0,0,203,60,1,0,0,0,204,206,7,0,0,0,205,204,1,0,0,0,206,
        207,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,216,1,0,0,0,209,
        213,5,46,0,0,210,212,7,0,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,
        211,1,0,0,0,213,214,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,216,
        209,1,0,0,0,216,217,1,0,0,0,217,225,1,0,0,0,218,220,5,46,0,0,219,
        221,7,0,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,
        223,1,0,0,0,223,225,1,0,0,0,224,205,1,0,0,0,224,218,1,0,0,0,225,
        62,1,0,0,0,226,230,5,34,0,0,227,229,8,1,0,0,228,227,1,0,0,0,229,
        232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,
        230,1,0,0,0,233,243,5,34,0,0,234,238,5,39,0,0,235,237,8,2,0,0,236,
        235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,
        241,1,0,0,0,240,238,1,0,0,0,241,243,5,39,0,0,242,226,1,0,0,0,242,
        234,1,0,0,0,243,64,1,0,0,0,244,248,7,3,0,0,245,247,7,4,0,0,246,245,
        1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,66,1,
        0,0,0,250,248,1,0,0,0,251,252,5,40,0,0,252,68,1,0,0,0,253,254,5,
        41,0,0,254,70,1,0,0,0,255,256,5,91,0,0,256,72,1,0,0,0,257,258,5,
        93,0,0,258,74,1,0,0,0,259,260,5,44,0,0,260,76,1,0,0,0,261,262,5,
        46,0,0,262,78,1,0,0,0,263,264,5,58,0,0,264,80,1,0,0,0,265,266,5,
        59,0,0,266,82,1,0,0,0,267,269,5,13,0,0,268,267,1,0,0,0,268,269,1,
        0,0,0,269,270,1,0,0,0,270,271,5,10,0,0,271,84,1,0,0,0,272,274,7,
        5,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,
        0,0,0,276,277,1,0,0,0,277,278,6,42,0,0,278,86,1,0,0,0,279,283,5,
        35,0,0,280,282,8,6,0,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,
        0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,6,
        43,0,0,287,88,1,0,0,0,288,289,5,92,0,0,289,291,5,13,0,0,290,288,
        1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,10,0,0,293,294,
        1,0,0,0,294,295,6,44,0,0,295,90,1,0,0,0,14,0,207,213,216,222,224,
        230,238,242,248,268,275,283,290,1,6,0,0
    ]

class PythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEF = 1
    CLASS = 2
    IF = 3
    ELSE = 4
    ELIF = 5
    FOR = 6
    WHILE = 7
    IN = 8
    RETURN = 9
    PRINT = 10
    AND = 11
    OR = 12
    NOT = 13
    TRUE = 14
    FALSE = 15
    NONE = 16
    RANGE = 17
    PLUS = 18
    MINUS = 19
    TIMES = 20
    POWER = 21
    DIVIDE = 22
    MOD = 23
    EQUAL = 24
    ASSIGN = 25
    LT = 26
    GT = 27
    LE = 28
    GE = 29
    NE = 30
    NUMBER = 31
    STRING = 32
    ID = 33
    LPAREN = 34
    RPAREN = 35
    LBRACKET = 36
    RBRACKET = 37
    COMMA = 38
    DOT = 39
    COLON = 40
    SEMI = 41
    NEWLINE = 42
    WS = 43
    COMMENT = 44
    LINE_JOIN = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'class'", "'if'", "'else'", "'elif'", "'for'", "'while'", 
            "'in'", "'return'", "'print'", "'and'", "'or'", "'not'", "'True'", 
            "'False'", "'None'", "'range'", "'+'", "'-'", "'*'", "'**'", 
            "'/'", "'%'", "'=='", "'='", "'<'", "'>'", "'<='", "'>='", "'!='", 
            "'('", "')'", "'['", "']'", "','", "'.'", "':'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "CLASS", "IF", "ELSE", "ELIF", "FOR", "WHILE", "IN", 
            "RETURN", "PRINT", "AND", "OR", "NOT", "TRUE", "FALSE", "NONE", 
            "RANGE", "PLUS", "MINUS", "TIMES", "POWER", "DIVIDE", "MOD", 
            "EQUAL", "ASSIGN", "LT", "GT", "LE", "GE", "NE", "NUMBER", "STRING", 
            "ID", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "COMMA", "DOT", 
            "COLON", "SEMI", "NEWLINE", "WS", "COMMENT", "LINE_JOIN" ]

    ruleNames = [ "DEF", "CLASS", "IF", "ELSE", "ELIF", "FOR", "WHILE", 
                  "IN", "RETURN", "PRINT", "AND", "OR", "NOT", "TRUE", "FALSE", 
                  "NONE", "RANGE", "PLUS", "MINUS", "TIMES", "POWER", "DIVIDE", 
                  "MOD", "EQUAL", "ASSIGN", "LT", "GT", "LE", "GE", "NE", 
                  "NUMBER", "STRING", "ID", "LPAREN", "RPAREN", "LBRACKET", 
                  "RBRACKET", "COMMA", "DOT", "COLON", "SEMI", "NEWLINE", 
                  "WS", "COMMENT", "LINE_JOIN" ]

    grammarFileName = "PythonLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


